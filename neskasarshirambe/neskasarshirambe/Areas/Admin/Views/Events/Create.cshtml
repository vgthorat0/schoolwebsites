@model Website.Dal.Event

@{
    ViewBag.Title = "Events > Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>
<link href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.4/croppie.min.css" rel="stylesheet" media="all" />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Event</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Priority, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Priority, new { htmlAttributes = new { @class = "form-control", @Value = "0" } })
            @Html.ValidationMessageFor(model => model.Priority, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="box">
                <input type="hidden" name="ImageData" id="ImageData" class="hide">
                <input type="hidden" name="Image" id="Image" class="hide">
                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
                <input type="file" id="file-input">

                <img class="cropped" src="" alt="">
            </div>
        </div>
    </div>
    <div class="form-group" style="margin-bottom:25px">

        <div class="col-md-12" id="crop-control">
            <!-- input file -->
            <!-- leftbox -->
            <div class="box-2">
                <div class="result "></div>
            </div>
            <!--rightbox-->
            <div class="box-2 img-result hide">
                <!-- result of crop -->

            </div>


        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">

            <input type="button" value="Crop Image" class="btn btn-primary" id="btn-crop" />
            <input type="submit" value="Create Event Image" class="btn btn-success" />
        </div>
    </div>
</div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.4/croppie.min.js"></script>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")

    }

    <script>
        // vars
        let result = document.querySelector('.result'),
            img_result = document.querySelector('.img-result'),
            img_w = document.querySelector('.img-w'),
            img_h = document.querySelector('.img-h'),
            options = document.querySelector('.options'),
            save = document.querySelector('#btn-crop'),
            cropped = document.querySelector('.cropped'),
            dwn = document.querySelector('.download'),
            upload = document.querySelector('#file-input');
            var cropper ;

        // on change show image with crop options
        upload.addEventListener('change', (e) => {
            if (e.target.files.length) {
                // start file reader
                const reader = new FileReader();
                reader.onload = (e) => {
                    if (e.target.result) {
                        // create new image
                        let img = document.createElement('img');
                        img.id = 'image';
                        img.src = e.target.result
                        // clean result before
                        result.innerHTML = '';
                        // append new image
                        result.appendChild(img);
                        // show save btn and options
                        //save.classList.remove('hide');
                        //options.classList.remove('hide');
                        // init cropper
                        // cropper = new Cropper(img);
                        cropper = new Croppie(document.getElementById('image'), {
                            viewport: {
                                width: 700,
                                height: 380
                            }
                        });
                        cropper.setZoom(50);
                        $("#Image").val("");
                        $("#crop-control").show();
                        $("#btn-crop").show();
                        $(".result").show();
                        $(".cropped").hide();
                    }
                };
                reader.readAsDataURL(e.target.files[0]);
            }
        });

        var b;
         //save on click
        save.addEventListener('click', (e) => {
            e.preventDefault();

            cropper.result('blob').then(function (blob) {
                // do something with cropped blob
                console.log(blob);
                b = blob;
                
                var reader = new FileReader();
                reader.readAsDataURL(blob);
                reader.onloadend = function () {
                    $("#Image").val("ImageSlected");
                    base64data = reader.result;
                    console.log(base64data);
                    let imgSrc = blob
                    // remove hide class of img
                    //cropped.classList.remove('hide');
                    //img_result.classList.remove('hide');
                    // show image cropped
                    cropped.src = base64data;
                    $("#ImageData").val(base64data);
                    $("#crop-control").hide();
                    $("#btn-crop").hide();
                    $(".result").hide();
                    $(".cropped").show();
                }
                
                //dwn.classList.remove('hide');
                //dwn.download = 'imagename.png';
                //dwn.setAttribute('href', imgSrc);
            });
            // get result to data uri
            
        });


    </script>
